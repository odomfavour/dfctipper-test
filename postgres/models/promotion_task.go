// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PromotionTask is an object representing the database table.
type PromotionTask struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PromotionID int    `boil:"promotion_id" json:"promotion_id" toml:"promotion_id" yaml:"promotion_id"`
	TaskType    string `boil:"task_type" json:"task_type" toml:"task_type" yaml:"task_type"`
	TaskInfo    string `boil:"task_info" json:"task_info" toml:"task_info" yaml:"task_info"`

	R *promotionTaskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L promotionTaskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PromotionTaskColumns = struct {
	ID          string
	PromotionID string
	TaskType    string
	TaskInfo    string
}{
	ID:          "id",
	PromotionID: "promotion_id",
	TaskType:    "task_type",
	TaskInfo:    "task_info",
}

var PromotionTaskTableColumns = struct {
	ID          string
	PromotionID string
	TaskType    string
	TaskInfo    string
}{
	ID:          "promotion_task.id",
	PromotionID: "promotion_task.promotion_id",
	TaskType:    "promotion_task.task_type",
	TaskInfo:    "promotion_task.task_info",
}

// Generated where

var PromotionTaskWhere = struct {
	ID          whereHelperint
	PromotionID whereHelperint
	TaskType    whereHelperstring
	TaskInfo    whereHelperstring
}{
	ID:          whereHelperint{field: "\"promotion_task\".\"id\""},
	PromotionID: whereHelperint{field: "\"promotion_task\".\"promotion_id\""},
	TaskType:    whereHelperstring{field: "\"promotion_task\".\"task_type\""},
	TaskInfo:    whereHelperstring{field: "\"promotion_task\".\"task_info\""},
}

// PromotionTaskRels is where relationship names are stored.
var PromotionTaskRels = struct {
	Promotion string
}{
	Promotion: "Promotion",
}

// promotionTaskR is where relationships are stored.
type promotionTaskR struct {
	Promotion *Promotion `boil:"Promotion" json:"Promotion" toml:"Promotion" yaml:"Promotion"`
}

// NewStruct creates a new relationship struct
func (*promotionTaskR) NewStruct() *promotionTaskR {
	return &promotionTaskR{}
}

// promotionTaskL is where Load methods for each relationship are stored.
type promotionTaskL struct{}

var (
	promotionTaskAllColumns            = []string{"id", "promotion_id", "task_type", "task_info"}
	promotionTaskColumnsWithoutDefault = []string{"promotion_id", "task_type", "task_info"}
	promotionTaskColumnsWithDefault    = []string{"id"}
	promotionTaskPrimaryKeyColumns     = []string{"id"}
)

type (
	// PromotionTaskSlice is an alias for a slice of pointers to PromotionTask.
	// This should almost always be used instead of []PromotionTask.
	PromotionTaskSlice []*PromotionTask

	promotionTaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	promotionTaskType                 = reflect.TypeOf(&PromotionTask{})
	promotionTaskMapping              = queries.MakeStructMapping(promotionTaskType)
	promotionTaskPrimaryKeyMapping, _ = queries.BindMapping(promotionTaskType, promotionTaskMapping, promotionTaskPrimaryKeyColumns)
	promotionTaskInsertCacheMut       sync.RWMutex
	promotionTaskInsertCache          = make(map[string]insertCache)
	promotionTaskUpdateCacheMut       sync.RWMutex
	promotionTaskUpdateCache          = make(map[string]updateCache)
	promotionTaskUpsertCacheMut       sync.RWMutex
	promotionTaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single promotionTask record from the query.
func (q promotionTaskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PromotionTask, error) {
	o := &PromotionTask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for promotion_task")
	}

	return o, nil
}

// All returns all PromotionTask records from the query.
func (q promotionTaskQuery) All(ctx context.Context, exec boil.ContextExecutor) (PromotionTaskSlice, error) {
	var o []*PromotionTask

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PromotionTask slice")
	}

	return o, nil
}

// Count returns the count of all PromotionTask records in the query.
func (q promotionTaskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count promotion_task rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q promotionTaskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if promotion_task exists")
	}

	return count > 0, nil
}

// Promotion pointed to by the foreign key.
func (o *PromotionTask) Promotion(mods ...qm.QueryMod) promotionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionID),
	}

	queryMods = append(queryMods, mods...)

	query := Promotions(queryMods...)
	queries.SetFrom(query.Query, "\"promotion\"")

	return query
}

// LoadPromotion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionTaskL) LoadPromotion(ctx context.Context, e boil.ContextExecutor, singular bool, maybePromotionTask interface{}, mods queries.Applicator) error {
	var slice []*PromotionTask
	var object *PromotionTask

	if singular {
		object = maybePromotionTask.(*PromotionTask)
	} else {
		slice = *maybePromotionTask.(*[]*PromotionTask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &promotionTaskR{}
		}
		args = append(args, object.PromotionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionTaskR{}
			}

			for _, a := range args {
				if a == obj.PromotionID {
					continue Outer
				}
			}

			args = append(args, obj.PromotionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`promotion`),
		qm.WhereIn(`promotion.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Promotion")
	}

	var resultSlice []*Promotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Promotion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotion")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Promotion = foreign
		if foreign.R == nil {
			foreign.R = &promotionR{}
		}
		foreign.R.PromotionTasks = append(foreign.R.PromotionTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PromotionID == foreign.ID {
				local.R.Promotion = foreign
				if foreign.R == nil {
					foreign.R = &promotionR{}
				}
				foreign.R.PromotionTasks = append(foreign.R.PromotionTasks, local)
				break
			}
		}
	}

	return nil
}

// SetPromotion of the promotionTask to the related item.
// Sets o.R.Promotion to related.
// Adds o to related.R.PromotionTasks.
func (o *PromotionTask) SetPromotion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Promotion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_task\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PromotionID = related.ID
	if o.R == nil {
		o.R = &promotionTaskR{
			Promotion: related,
		}
	} else {
		o.R.Promotion = related
	}

	if related.R == nil {
		related.R = &promotionR{
			PromotionTasks: PromotionTaskSlice{o},
		}
	} else {
		related.R.PromotionTasks = append(related.R.PromotionTasks, o)
	}

	return nil
}

// PromotionTasks retrieves all the records using an executor.
func PromotionTasks(mods ...qm.QueryMod) promotionTaskQuery {
	mods = append(mods, qm.From("\"promotion_task\""))
	return promotionTaskQuery{NewQuery(mods...)}
}

// FindPromotionTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPromotionTask(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PromotionTask, error) {
	promotionTaskObj := &PromotionTask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"promotion_task\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, promotionTaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from promotion_task")
	}

	return promotionTaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PromotionTask) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no promotion_task provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(promotionTaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	promotionTaskInsertCacheMut.RLock()
	cache, cached := promotionTaskInsertCache[key]
	promotionTaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			promotionTaskAllColumns,
			promotionTaskColumnsWithDefault,
			promotionTaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(promotionTaskType, promotionTaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(promotionTaskType, promotionTaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"promotion_task\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"promotion_task\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into promotion_task")
	}

	if !cached {
		promotionTaskInsertCacheMut.Lock()
		promotionTaskInsertCache[key] = cache
		promotionTaskInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PromotionTask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PromotionTask) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	promotionTaskUpdateCacheMut.RLock()
	cache, cached := promotionTaskUpdateCache[key]
	promotionTaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			promotionTaskAllColumns,
			promotionTaskPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update promotion_task, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"promotion_task\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, promotionTaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(promotionTaskType, promotionTaskMapping, append(wl, promotionTaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update promotion_task row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for promotion_task")
	}

	if !cached {
		promotionTaskUpdateCacheMut.Lock()
		promotionTaskUpdateCache[key] = cache
		promotionTaskUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q promotionTaskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for promotion_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for promotion_task")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PromotionTaskSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"promotion_task\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, promotionTaskPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in promotionTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all promotionTask")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PromotionTask) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no promotion_task provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(promotionTaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	promotionTaskUpsertCacheMut.RLock()
	cache, cached := promotionTaskUpsertCache[key]
	promotionTaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			promotionTaskAllColumns,
			promotionTaskColumnsWithDefault,
			promotionTaskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			promotionTaskAllColumns,
			promotionTaskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert promotion_task, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(promotionTaskPrimaryKeyColumns))
			copy(conflict, promotionTaskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"promotion_task\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(promotionTaskType, promotionTaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(promotionTaskType, promotionTaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert promotion_task")
	}

	if !cached {
		promotionTaskUpsertCacheMut.Lock()
		promotionTaskUpsertCache[key] = cache
		promotionTaskUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PromotionTask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PromotionTask) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PromotionTask provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), promotionTaskPrimaryKeyMapping)
	sql := "DELETE FROM \"promotion_task\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from promotion_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for promotion_task")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q promotionTaskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no promotionTaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from promotion_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for promotion_task")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PromotionTaskSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"promotion_task\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionTaskPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from promotionTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for promotion_task")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PromotionTask) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPromotionTask(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PromotionTaskSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PromotionTaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"promotion_task\".* FROM \"promotion_task\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionTaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PromotionTaskSlice")
	}

	*o = slice

	return nil
}

// PromotionTaskExists checks if the PromotionTask row exists.
func PromotionTaskExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"promotion_task\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if promotion_task exists")
	}

	return exists, nil
}
