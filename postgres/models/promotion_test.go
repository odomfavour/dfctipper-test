// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPromotions(t *testing.T) {
	t.Parallel()

	query := Promotions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPromotionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPromotionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Promotions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPromotionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PromotionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPromotionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PromotionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Promotion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PromotionExists to return true, but got false.")
	}
}

func testPromotionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	promotionFound, err := FindPromotion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if promotionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPromotionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Promotions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPromotionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Promotions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPromotionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	promotionOne := &Promotion{}
	promotionTwo := &Promotion{}
	if err = randomize.Struct(seed, promotionOne, promotionDBTypes, false, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}
	if err = randomize.Struct(seed, promotionTwo, promotionDBTypes, false, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = promotionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = promotionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Promotions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPromotionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	promotionOne := &Promotion{}
	promotionTwo := &Promotion{}
	if err = randomize.Struct(seed, promotionOne, promotionDBTypes, false, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}
	if err = randomize.Struct(seed, promotionTwo, promotionDBTypes, false, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = promotionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = promotionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPromotionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPromotionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(promotionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPromotionToManyRewards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Promotion
	var b, c Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PromotionID = a.ID
	c.PromotionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Rewards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PromotionID == b.PromotionID {
			bFound = true
		}
		if v.PromotionID == c.PromotionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PromotionSlice{&a}
	if err = a.L.LoadRewards(ctx, tx, false, (*[]*Promotion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Rewards = nil
	if err = a.L.LoadRewards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPromotionToManyAddOpRewards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Promotion
	var b, c, d, e Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, promotionDBTypes, false, strmangle.SetComplement(promotionPrimaryKeyColumns, promotionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Reward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Reward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRewards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PromotionID {
			t.Error("foreign key was wrong value", a.ID, first.PromotionID)
		}
		if a.ID != second.PromotionID {
			t.Error("foreign key was wrong value", a.ID, second.PromotionID)
		}

		if first.R.Promotion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Promotion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Rewards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Rewards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Rewards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPromotionToOneAccountUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Promotion
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, promotionDBTypes, false, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PromotionSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*Promotion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPromotionToOneSetOpAccountUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Promotion
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, promotionDBTypes, false, strmangle.SetComplement(promotionPrimaryKeyColumns, promotionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorPromotions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatorID != x.ID {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatorID != x.ID {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testPromotionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPromotionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PromotionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPromotionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Promotions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	promotionDBTypes = map[string]string{`ID`: `integer`, `CreatorID`: `character varying`, `CreatedAt`: `bigint`, `TweetLink`: `character varying`, `RewardCount`: `integer`, `RewardPerRetweet`: `integer`, `RetweetCount`: `integer`}
	_                = bytes.MinRead
)

func testPromotionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(promotionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(promotionAllColumns) == len(promotionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPromotionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(promotionAllColumns) == len(promotionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Promotion{}
	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, promotionDBTypes, true, promotionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(promotionAllColumns, promotionPrimaryKeyColumns) {
		fields = promotionAllColumns
	} else {
		fields = strmangle.SetComplement(
			promotionAllColumns,
			promotionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PromotionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPromotionsUpsert(t *testing.T) {
	t.Parallel()

	if len(promotionAllColumns) == len(promotionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Promotion{}
	if err = randomize.Struct(seed, &o, promotionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Promotion: %s", err)
	}

	count, err := Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, promotionDBTypes, false, promotionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Promotion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Promotion: %s", err)
	}

	count, err = Promotions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
