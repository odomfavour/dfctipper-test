// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Promotion is an object representing the database table.
type Promotion struct {
	ID               int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorID        string `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`
	CreatedAt        int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	TweetLink        string `boil:"tweet_link" json:"tweet_link" toml:"tweet_link" yaml:"tweet_link"`
	RewardCount      int    `boil:"reward_count" json:"reward_count" toml:"reward_count" yaml:"reward_count"`
	RewardPerRetweet int    `boil:"reward_per_retweet" json:"reward_per_retweet" toml:"reward_per_retweet" yaml:"reward_per_retweet"`
	RetweetCount     int    `boil:"retweet_count" json:"retweet_count" toml:"retweet_count" yaml:"retweet_count"`

	R *promotionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L promotionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PromotionColumns = struct {
	ID               string
	CreatorID        string
	CreatedAt        string
	TweetLink        string
	RewardCount      string
	RewardPerRetweet string
	RetweetCount     string
}{
	ID:               "id",
	CreatorID:        "creator_id",
	CreatedAt:        "created_at",
	TweetLink:        "tweet_link",
	RewardCount:      "reward_count",
	RewardPerRetweet: "reward_per_retweet",
	RetweetCount:     "retweet_count",
}

var PromotionTableColumns = struct {
	ID               string
	CreatorID        string
	CreatedAt        string
	TweetLink        string
	RewardCount      string
	RewardPerRetweet string
	RetweetCount     string
}{
	ID:               "promotion.id",
	CreatorID:        "promotion.creator_id",
	CreatedAt:        "promotion.created_at",
	TweetLink:        "promotion.tweet_link",
	RewardCount:      "promotion.reward_count",
	RewardPerRetweet: "promotion.reward_per_retweet",
	RetweetCount:     "promotion.retweet_count",
}

// Generated where

var PromotionWhere = struct {
	ID               whereHelperint
	CreatorID        whereHelperstring
	CreatedAt        whereHelperint64
	TweetLink        whereHelperstring
	RewardCount      whereHelperint
	RewardPerRetweet whereHelperint
	RetweetCount     whereHelperint
}{
	ID:               whereHelperint{field: "\"promotion\".\"id\""},
	CreatorID:        whereHelperstring{field: "\"promotion\".\"creator_id\""},
	CreatedAt:        whereHelperint64{field: "\"promotion\".\"created_at\""},
	TweetLink:        whereHelperstring{field: "\"promotion\".\"tweet_link\""},
	RewardCount:      whereHelperint{field: "\"promotion\".\"reward_count\""},
	RewardPerRetweet: whereHelperint{field: "\"promotion\".\"reward_per_retweet\""},
	RetweetCount:     whereHelperint{field: "\"promotion\".\"retweet_count\""},
}

// PromotionRels is where relationship names are stored.
var PromotionRels = struct {
	Creator        string
	PromotionTasks string
	Rewards        string
}{
	Creator:        "Creator",
	PromotionTasks: "PromotionTasks",
	Rewards:        "Rewards",
}

// promotionR is where relationships are stored.
type promotionR struct {
	Creator        *Account           `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	PromotionTasks PromotionTaskSlice `boil:"PromotionTasks" json:"PromotionTasks" toml:"PromotionTasks" yaml:"PromotionTasks"`
	Rewards        RewardSlice        `boil:"Rewards" json:"Rewards" toml:"Rewards" yaml:"Rewards"`
}

// NewStruct creates a new relationship struct
func (*promotionR) NewStruct() *promotionR {
	return &promotionR{}
}

// promotionL is where Load methods for each relationship are stored.
type promotionL struct{}

var (
	promotionAllColumns            = []string{"id", "creator_id", "created_at", "tweet_link", "reward_count", "reward_per_retweet", "retweet_count"}
	promotionColumnsWithoutDefault = []string{"creator_id", "created_at", "tweet_link", "reward_count", "reward_per_retweet", "retweet_count"}
	promotionColumnsWithDefault    = []string{"id"}
	promotionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PromotionSlice is an alias for a slice of pointers to Promotion.
	// This should almost always be used instead of []Promotion.
	PromotionSlice []*Promotion

	promotionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	promotionType                 = reflect.TypeOf(&Promotion{})
	promotionMapping              = queries.MakeStructMapping(promotionType)
	promotionPrimaryKeyMapping, _ = queries.BindMapping(promotionType, promotionMapping, promotionPrimaryKeyColumns)
	promotionInsertCacheMut       sync.RWMutex
	promotionInsertCache          = make(map[string]insertCache)
	promotionUpdateCacheMut       sync.RWMutex
	promotionUpdateCache          = make(map[string]updateCache)
	promotionUpsertCacheMut       sync.RWMutex
	promotionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single promotion record from the query.
func (q promotionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Promotion, error) {
	o := &Promotion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for promotion")
	}

	return o, nil
}

// All returns all Promotion records from the query.
func (q promotionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PromotionSlice, error) {
	var o []*Promotion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Promotion slice")
	}

	return o, nil
}

// Count returns the count of all Promotion records in the query.
func (q promotionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count promotion rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q promotionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if promotion exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *Promotion) Creator(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// PromotionTasks retrieves all the promotion_task's PromotionTasks with an executor.
func (o *Promotion) PromotionTasks(mods ...qm.QueryMod) promotionTaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"promotion_task\".\"promotion_id\"=?", o.ID),
	)

	query := PromotionTasks(queryMods...)
	queries.SetFrom(query.Query, "\"promotion_task\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"promotion_task\".*"})
	}

	return query
}

// Rewards retrieves all the reward's Rewards with an executor.
func (o *Promotion) Rewards(mods ...qm.QueryMod) rewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reward\".\"promotion_id\"=?", o.ID),
	)

	query := Rewards(queryMods...)
	queries.SetFrom(query.Query, "\"reward\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"reward\".*"})
	}

	return query
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybePromotion interface{}, mods queries.Applicator) error {
	var slice []*Promotion
	var object *Promotion

	if singular {
		object = maybePromotion.(*Promotion)
	} else {
		slice = *maybePromotion.(*[]*Promotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &promotionR{}
		}
		args = append(args, object.CreatorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionR{}
			}

			for _, a := range args {
				if a == obj.CreatorID {
					continue Outer
				}
			}

			args = append(args, obj.CreatorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.CreatorPromotions = append(foreign.R.CreatorPromotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.ID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CreatorPromotions = append(foreign.R.CreatorPromotions, local)
				break
			}
		}
	}

	return nil
}

// LoadPromotionTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionL) LoadPromotionTasks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePromotion interface{}, mods queries.Applicator) error {
	var slice []*Promotion
	var object *Promotion

	if singular {
		object = maybePromotion.(*Promotion)
	} else {
		slice = *maybePromotion.(*[]*Promotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &promotionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`promotion_task`),
		qm.WhereIn(`promotion_task.promotion_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load promotion_task")
	}

	var resultSlice []*PromotionTask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice promotion_task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on promotion_task")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_task")
	}

	if singular {
		object.R.PromotionTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &promotionTaskR{}
			}
			foreign.R.Promotion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionID {
				local.R.PromotionTasks = append(local.R.PromotionTasks, foreign)
				if foreign.R == nil {
					foreign.R = &promotionTaskR{}
				}
				foreign.R.Promotion = local
				break
			}
		}
	}

	return nil
}

// LoadRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionL) LoadRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybePromotion interface{}, mods queries.Applicator) error {
	var slice []*Promotion
	var object *Promotion

	if singular {
		object = maybePromotion.(*Promotion)
	} else {
		slice = *maybePromotion.(*[]*Promotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &promotionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reward`),
		qm.WhereIn(`reward.promotion_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reward")
	}

	var resultSlice []*Reward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reward")
	}

	if singular {
		object.R.Rewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rewardR{}
			}
			foreign.R.Promotion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionID {
				local.R.Rewards = append(local.R.Rewards, foreign)
				if foreign.R == nil {
					foreign.R = &rewardR{}
				}
				foreign.R.Promotion = local
				break
			}
		}
	}

	return nil
}

// SetCreator of the promotion to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorPromotions.
func (o *Promotion) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"creator_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.ID
	if o.R == nil {
		o.R = &promotionR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &accountR{
			CreatorPromotions: PromotionSlice{o},
		}
	} else {
		related.R.CreatorPromotions = append(related.R.CreatorPromotions, o)
	}

	return nil
}

// AddPromotionTasks adds the given related objects to the existing relationships
// of the promotion, optionally inserting them as new records.
// Appends related to o.R.PromotionTasks.
// Sets related.R.Promotion appropriately.
func (o *Promotion) AddPromotionTasks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PromotionTask) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"promotion_task\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_id"}),
				strmangle.WhereClause("\"", "\"", 2, promotionTaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionR{
			PromotionTasks: related,
		}
	} else {
		o.R.PromotionTasks = append(o.R.PromotionTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &promotionTaskR{
				Promotion: o,
			}
		} else {
			rel.R.Promotion = o
		}
	}
	return nil
}

// AddRewards adds the given related objects to the existing relationships
// of the promotion, optionally inserting them as new records.
// Appends related to o.R.Rewards.
// Sets related.R.Promotion appropriately.
func (o *Promotion) AddRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_id"}),
				strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionR{
			Rewards: related,
		}
	} else {
		o.R.Rewards = append(o.R.Rewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rewardR{
				Promotion: o,
			}
		} else {
			rel.R.Promotion = o
		}
	}
	return nil
}

// Promotions retrieves all the records using an executor.
func Promotions(mods ...qm.QueryMod) promotionQuery {
	mods = append(mods, qm.From("\"promotion\""))
	return promotionQuery{NewQuery(mods...)}
}

// FindPromotion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPromotion(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Promotion, error) {
	promotionObj := &Promotion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"promotion\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, promotionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from promotion")
	}

	return promotionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Promotion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no promotion provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(promotionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	promotionInsertCacheMut.RLock()
	cache, cached := promotionInsertCache[key]
	promotionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			promotionAllColumns,
			promotionColumnsWithDefault,
			promotionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(promotionType, promotionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(promotionType, promotionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"promotion\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"promotion\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into promotion")
	}

	if !cached {
		promotionInsertCacheMut.Lock()
		promotionInsertCache[key] = cache
		promotionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Promotion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Promotion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	promotionUpdateCacheMut.RLock()
	cache, cached := promotionUpdateCache[key]
	promotionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			promotionAllColumns,
			promotionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update promotion, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"promotion\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, promotionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(promotionType, promotionMapping, append(wl, promotionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update promotion row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for promotion")
	}

	if !cached {
		promotionUpdateCacheMut.Lock()
		promotionUpdateCache[key] = cache
		promotionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q promotionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for promotion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for promotion")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PromotionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"promotion\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, promotionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in promotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all promotion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Promotion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no promotion provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(promotionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	promotionUpsertCacheMut.RLock()
	cache, cached := promotionUpsertCache[key]
	promotionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			promotionAllColumns,
			promotionColumnsWithDefault,
			promotionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			promotionAllColumns,
			promotionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert promotion, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(promotionPrimaryKeyColumns))
			copy(conflict, promotionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"promotion\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(promotionType, promotionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(promotionType, promotionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert promotion")
	}

	if !cached {
		promotionUpsertCacheMut.Lock()
		promotionUpsertCache[key] = cache
		promotionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Promotion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Promotion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Promotion provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), promotionPrimaryKeyMapping)
	sql := "DELETE FROM \"promotion\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from promotion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for promotion")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q promotionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no promotionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from promotion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for promotion")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PromotionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"promotion\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from promotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for promotion")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Promotion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPromotion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PromotionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PromotionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"promotion\".* FROM \"promotion\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PromotionSlice")
	}

	*o = slice

	return nil
}

// PromotionExists checks if the Promotion row exists.
func PromotionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"promotion\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if promotion exists")
	}

	return exists, nil
}
